## Define GitHub Action Workflow Name
name: Deployment

## Trigger When Pull Request Occurs to 'Master' Branch or Manually Started
on:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - 'README.md'
      - 'VERSION'
  ## Allow Manual Runs
  workflow_dispatch:

jobs:
  ## Define Workflow Steps
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      ## STEP 0: Checkout Source
      - uses: actions/checkout@v2
              
      ## STEP 1: Determine Release Version
      - name: Read current version
        id: current_version
        uses: christian-draeger/read-properties@1.0.0
        with:
          path: 'VERSION'
          property: 'version'
                    
      ## STEP 2: Generate New Version Number      
      - name: Bump release version
        id: new_version
        uses: christian-draeger/increment-semantic-version@1.0.0
        with:
          current-version: ${{ steps.current_version.outputs.value }}
          version-fragment: 'bug'
      
      ## STEP 2b: Output Version Information
      - name: Version Information
        run: |
          echo "Current Version: ${{ steps.current_version.outputs.value }}"
          echo "New Version: ${{ steps.new_version.outputs.next-version }}"
      
      ## STEP 3: Update VERSION File
      - name: Remove Current Version
        uses: JesseTG/rm@v1.0.0
        with:
          path: 'VERSION'
          
      - name: Save New Version
        uses: christian-draeger/write-properties@1.0.0
        with:
          path: 'VERSION'
          property: 'version'
          value: ${{ steps.new_version.outputs.next-version }}
            
      ## STEP 4: Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.new_version.outputs.next-version }}
          release_name: Version ${{ steps.new_version.outputs.next-version }}
          body: |
            "GitHub Actions Pipeline.
            Release Version: ${{ steps.new_version.outputs.next-version }}"
          draft: false
          prerelease: true
      
      
      ## STEP 5: Update VERSION
      - name: Commit Version Change
        uses: matheusalbino/git-commit@v1.0.1
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            message: 'Updated version to ${{ steps.new_version.outputs.next-version }}'
      
      ## STEP 6: Build & Publish Docker Image     
      #- name: Build & Publish to Docker Hub 
      #  uses: elgohr/Publish-Docker-Github-Action@master
      #  with:
      #    name: pkeech/WinRM-Demo
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_TOKEN }}
      #    dockerfile: ./Dockerfile
          #context: ./WorkflowEngine/
      #    tags: ${{ steps.new_version.outputs.next-version }}
      
      ## STEP 6: Perform Code Coverage
      - name: CodeCov
        # You may pin to the exact commit or the version.
        # uses: codecov/codecov-action@6004246f47ab62d32be025ce173b241cd84ac58e
        uses: codecov/codecov-action@v1.0.13
        with:
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CODECOV_TOKEN }}
          
      
      ## STEP 7: Test Docker Image
      ## TODO
               
      ## STEP 8: SLACK Notification
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2.0.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'A new version of Docker-WinRM-Demo (${{ steps.new_version.outputs.next-version }}) was release and published to Docker Hub' 
