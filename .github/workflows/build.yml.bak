## Define GitHub Action Workflow Name
name: Build

## When Pull Request to Master is Created
on:
  pull_request:
    branches: 
      - master
  workflow_dispatch:

jobs:
  ## Define Workflow Steps
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      ## STEP 0: Checkout Source
      - uses: actions/checkout@v2
              
      ## STEP 1: Determine Release Version
      - name: Read current version
        id: current_version
        uses: christian-draeger/read-properties@1.0.0
        with:
          path: 'VERSION'
          property: 'version'
                    
      ## STEP 2: Generate New Version Number      
      - name: Bump release version
        id: new_version
        uses: christian-draeger/increment-semantic-version@1.0.0
        with:
          current-version: ${{ steps.current_version.outputs.value }}
          version-fragment: 'bug'
            
      ## STEP 3: Update VERSION File (Remove)
      - name: Remove Current Version
        uses: JesseTG/rm@v1.0.0
        with:
          path: 'VERSION'

      ## STEP 4: Update VERSION File (Add)
      - name: Save New Version
        uses: christian-draeger/write-properties@1.0.0
        with:
          path: 'VERSION'
          property: 'version'
          value: ${{ steps.new_version.outputs.next-version }}
                      
      ## STEP 5: Update VERSION File (Commit)
      - name: Commit Version Change
        uses: matheusalbino/git-commit@v1.0.1
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            message: 'Updated version to ${{ steps.new_version.outputs.next-version }}'

          
          

## Define GitHub Action Workflow Name
#name: Testing

## When Pull Request to Master is Created
#on:
#  pull_request:
#    branches: 
#      - master
#  workflow_dispatch:

## Define Workflow
#jobs:
#  test_pull_request:
#    runs-on: ubuntu-latest

#    steps:
      ## STEP 0: Checkout Source
#      - uses: actions/checkout@v2 
      
      ## STEP 1: Build Docker 'Test' Image
      #- name: Build and push Docker images
      #  uses: docker/build-push-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_TOKEN }}
      #    repository: pkeech/WinRM-Demo
      #    tags: dev

      ## STEP 1: Perform Code Coverage (CodeCov)
#      - name: CodeCov
#        uses: codecov/codecov-action@v1.0.13
#        with:          
#          token: ${{ secrets.CODECOV_TOKEN }}
      
      ## STEP 2: Test Image Depenedencies (Trivy)
      #- name: Trivy
        
             
      ## STEP 3: SLACK Notification
#      - name: Slack Notification
#        uses: rtCamp/action-slack-notify@v2.0.0
#        env:
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#          SLACK_MESSAGE: 'Docker-WinRM-Demo has successfully been tested.' 
